generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  uuid       String   @unique(map: "failed_jobs_uuid_unique") @db.VarChar(255)
  connection String   @db.Text
  queue      String   @db.Text
  payload    String   @db.LongText
  exception  String   @db.LongText
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model messages {
  id                              BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  from_user                       BigInt    @db.UnsignedBigInt
  to_user                         BigInt    @db.UnsignedBigInt
  content                         String    @db.Text
  created_at                      DateTime? @db.Timestamp(0)
  updated_at                      DateTime? @db.Timestamp(0)
  users_messages_from_userTousers users     @relation("messages_from_userTousers", fields: [from_user], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "messages_from_user_foreign")
  users_messages_to_userTousers   users     @relation("messages_to_userTousers", fields: [to_user], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "messages_to_user_foreign")

  @@index([from_user], map: "messages_from_user_foreign")
  @@index([to_user], map: "messages_to_user_foreign")
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String @db.VarChar(255)
  batch     Int
}

model password_reset_tokens {
  email      String    @id @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
}

model personal_access_tokens {
  id             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  tokenable_type String    @db.VarChar(255)
  tokenable_id   BigInt    @db.UnsignedBigInt
  name           String    @db.VarChar(255)
  token          String    @unique(map: "personal_access_tokens_token_unique") @db.VarChar(64)
  abilities      String?   @db.Text
  last_used_at   DateTime? @db.Timestamp(0)
  expires_at     DateTime? @db.Timestamp(0)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)

  @@index([tokenable_type, tokenable_id], map: "personal_access_tokens_tokenable_type_tokenable_id_index")
}

model users {
  id                                 BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  name                               String     @db.VarChar(255)
  email                              String     @unique(map: "users_email_unique") @db.VarChar(255)
  email_verified_at                  DateTime?  @db.Timestamp(0)
  password                           String     @db.VarChar(255)
  two_factor_secret                  String?    @db.Text
  two_factor_recovery_codes          String?    @db.Text
  two_factor_confirmed_at            DateTime?  @db.Timestamp(0)
  remember_token                     String?    @db.VarChar(100)
  created_at                         DateTime?  @db.Timestamp(0)
  updated_at                         DateTime?  @db.Timestamp(0)
  messages_messages_from_userTousers messages[] @relation("messages_from_userTousers")
  messages_messages_to_userTousers   messages[] @relation("messages_to_userTousers")
}
